---
description: JavaScript/TypeScript-specific rules, naming conventions, and layout for XM Cloud development
alwaysApply: false
globs:
  - '**/*.js'
  - '**/*.ts'
  - '**/*.tsx'
  - '**/*.mjs'
---

# JavaScript/TypeScript Rules

## Naming Conventions

Variables and Functions:
- Use camelCase: `handleClick()`, `isActive`, `prefersReducedMotion`
- Boolean variables: prefix with `is`, `has`, `can`, `should`
- Event handlers: prefix with `handle` or `on`: `handleClick`, `handleKeyDown`
- State variables: descriptive names like `activeIndex`, `isExpanding`

Components (React):
- Use PascalCase: `ArticleHeader`, `ProductListing`, `VerticalImageAccordion`
- Main component files: `Hero.tsx`, `ProductListing.tsx`
- Component directories: kebab-case like `article-header/`, `product-listing/`

Constants and Variables:
- Use UPPER_SNAKE_CASE: `USER_ZIPCODE`, `DEFAULT_TIMEOUT`
- Environment variables: `SITECORE_EDGE_CONTEXT_ID`, `NEXT_PUBLIC_DEFAULT_SITE_NAME`
- Dictionary keys: `dictionaryKeys.HERO_SubmitCTALabel`

File Naming Patterns:
- Utilities: `NoDataFallback.tsx`, `date-utils.ts`
- Main components: `ComponentName.tsx`

Types and Interfaces:
- Component props: `HeroProps`, `ArticleHeaderProps`, `ProductListingProps`
- Field interfaces: `ArticleHeaderFields`, `HeroFields`
- Parameter interfaces: `ArticleHeaderParams`, `VerticalImageAccordionParams`
- Use `{ [key: string]: any; // eslint-disable-line }` for flexible params

## Code Layout and Organization

Directory Structure:
```
src/
  components/          # React components organized by feature
    hero/             # Component directories with variants
      Hero.tsx        # Main component file with props and variants
    article-header/   # Component with complex structure
    product-listing/  # Multi-variant component
    ui/              # Shadcn/ui components
    image/           # Reusable image wrapper
    button-component/ # Button variations
  lib/                # Configuration and utilities
    component-props/  # Shared component props
    constants.ts      # Application constants
    utils.ts          # Common utilities
  utils/              # Helper functions and utilities
    NoDataFallback.tsx # Standard fallback component
    date-utils.ts     # Date formatting utilities
  hooks/              # Custom React hooks
  variables/          # Constants and dictionary keys
  styles/             # Styling files (global CSS)
```

File Organization:
- Component directories contain main file, variants, and props
- Main component file should contain variants and props following the Locality of Behavior pattern
- Using `.dev.tsx` files for variant implementations is discouraged unless maintainability becomes dificult for the componenent and seperation can not be avoided
- Shared utilities in dedicated directories
- Group UI components in `ui/` subdirectory

## Error Handling

API Calls:
- Always wrap XM Cloud API calls in try/catch blocks
- Throw custom errors with context: `XMCloudFetchError`, `ComponentRenderError`
- Handle edge cases with guard clauses

```typescript
async function fetchLayoutData(path: string): Promise<LayoutData> {
  if (!path) {
    throw new Error('Path is required for layout data fetch');
  }
  
  try {
    const response = await sitecoreLayoutService.getRouteData(path);
    return response.sitecore.route;
  } catch (error) {
    throw new XMCloudFetchError(`Failed to fetch layout data for path: ${path}`, error);
  }
}
```

## Security

Input Validation:
- Sanitize user inputs before processing
- Validate data at application boundaries
- Use type guards for runtime type checking
- Escape content when rendering to prevent XSS

Environment Variables:
- Never hardcode sensitive values in source code
- Use environment variables for all configuration
- Validate environment variables at application startup
- Use different .env files for different environments

```typescript
// Environment validation example
const requiredEnvVars = [
  'SITECORE_EDGE_CONTEXT_ID',
  'NEXT_PUBLIC_DEFAULT_SITE_NAME',
  'SITECORE_EDITING_SECRET'
];

requiredEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    throw new Error(`Missing required environment variable: ${envVar}`);
  }
});
```

## Performance

Optimization Patterns:
- Cache XM Cloud API responses using React Query or similar caching solutions
- Use React.memo for expensive components
- Lazy-load non-critical modules: `const Component = lazy(() => import('./Component'))`
- Use useCallback and useMemo for expensive operations
- Implement proper loading states for data fetching

Next.js Specific:
- Use Next.js Image component for optimized images
- Implement proper ISR (Incremental Static Regeneration) patterns
- Use dynamic imports for code splitting
- Optimize bundle size with proper imports

TypeScript:
- Enable strict mode in tsconfig.json
- Prefer type assertions over any: `value as LayoutData`
- Use discriminated unions for complex state management
- Define proper interfaces for XM Cloud data structures

## Documentation

JSDoc Comments:
- All new functions, interfaces, classes must have JSDoc style comments
- Include @param tags for all parameters with types and descriptions
- Include @returns tag for return values with type and description
- Use descriptive comments that explain the purpose and behavior

Import Patterns:
- Use `type` imports for TypeScript types: `import type React from 'react'`
- Import Sitecore components: `import { Text, RichText, Image, useSitecore } from '@sitecore-content-sdk/nextjs'`
- Import utilities: `import { cn } from '@/lib/utils'`
- Import UI components: `import { Button } from '@/components/ui/button'`
- Import as alias for reusable components: `import { Default as ImageWrapper } from '@/components/image/ImageWrapper.dev'`

```typescript
// Standard import pattern for XM Cloud components
'use client'; // When client-side features needed

import type React from 'react';
import { useState, useEffect, useRef } from 'react';
import { cn } from '@/lib/utils';
import { Text, RichText, Image, useSitecore } from '@sitecore-content-sdk/nextjs';
import { ComponentProps } from '@/lib/component-props';
import { NoDataFallback } from '@/utils/NoDataFallback';
import { Default as ImageWrapper } from '@/components/image/ImageWrapper.dev';
import { ButtonBase } from '@/components/button-component/ButtonComponent';

/**
 * Hero component for displaying prominent content on XM Cloud pages
 * @param {HeroProps} props - Component props from XM Cloud datasource
 * @returns {JSX.Element} The rendered hero component with variants support
 */
export const HeroDefault: React.FC<HeroProps> = (props) => {
  const { fields, isPageEditing } = props;
  
  if (!fields?.data?.datasource) {
    return <NoDataFallback componentName="Hero" />;
  }
  
  // Component implementation
};
```

Referenced:
@examples/kit-nextjs-article-starter/src/components/article-header/ArticleHeader.tsx
@examples/kit-nextjs-product-listing/src/components/product-listing/ProductListing.tsx
@examples/kit-nextjs-article-starter/src/utils/NoDataFallback.tsx