---
description: Core coding principles and universal standards for XM Cloud starter applications
alwaysApply: true
globs: []
---

# General Coding Principles

## Universal Standards

DRY Principle:
- Don't Repeat Yourself - extract common functionality
- Create reusable utilities and helper functions
- Use composition over inheritance
- Share types and interfaces across components

SOLID Principles:
- Single Responsibility: each function/component has one purpose
- Open/Closed: extend functionality through composition
- Dependency Inversion: depend on abstractions, not implementations

Code Clarity:
- Write self-documenting code with clear intent
- Use meaningful names that express business concepts
- Prefer explicit over implicit behavior
- Make dependencies and requirements obvious

## Architecture Patterns

Modular Design:
- Organize code into focused, cohesive components
- Minimize coupling between modules
- Use clear interfaces between layers
- Follow established Next.js and XM Cloud patterns consistently

Data Flow:
- Prefer unidirectional data flow
- Validate inputs at component boundaries
- Transform data at appropriate layers
- Handle errors close to their source

Testing:
- Write testable code with minimal dependencies
- Use dependency injection for better testability
- Mock external services and XM Cloud APIs
- Test behavior, not implementation details

## Development Standards

Version Control:
- Write descriptive commit messages
- Keep commits focused and atomic
- Use branching strategies appropriate to team size
- Review code before merging to dev branch

Documentation:
- Document public APIs and component interfaces
- Include usage examples for complex functionality
- Keep documentation close to code
- Update documentation with code changes

Performance:
- Optimize for readability first, performance second
- Profile before optimizing
- Cache expensive operations appropriately
- Consider memory usage and cleanup in React components

## Quality Assurance

Code Review:
- Review for logic, readability, and maintainability
- Check error handling and edge cases
- Verify tests cover new functionality
- Ensure documentation is updated

Continuous Integration:
- All tests must pass before merging
- Linting and formatting checks must pass
- Build process must complete successfully
- No breaking changes without proper migration

Referenced:
@examples/kit-nextjs-article-starter/src/components/
@examples/kit-nextjs-location-finder/src/components/
@examples/kit-nextjs-product-listing/src/components/
@examples/basic-nextjs/src/components/